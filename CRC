#include <stdio.h>
#include <string.h>

void xor_division(char dividend[], char key[], char remainder[], char quotient[]) {
    int keylen = strlen(key);
    char temp[100], xorKey[30];
    int i, j;

    strncpy(temp, dividend, keylen);
    temp[keylen] = '\0';

    int msglen = strlen(dividend) - keylen + 1;

    for (i = 0; i < msglen; i++) {
        quotient[i] = temp[0];  // Store quotient bit

        // Decide which key to use for XOR
        if (temp[0] == '1') {
            for (j = 0; j < keylen; j++)
                xorKey[j] = key[j];
        } else {
            for (j = 0; j < keylen; j++)
                xorKey[j] = '0';
        }

        // XOR operation
        for (j = 1; j < keylen; j++)
            temp[j - 1] = (temp[j] == xorKey[j]) ? '0' : '1';

        temp[keylen - 1] = dividend[i + keylen]; // bring next bit from dividend
    }

    quotient[msglen] = '\0';
    strncpy(remainder, temp, keylen - 1);
    remainder[keylen - 1] = '\0';
}

int main() {
    char data[100], key[30], appendedData[130], remainder[30], quotient[130], received[130];
    int i;

    printf("Enter data: ");
    scanf("%s", data);
    printf("Enter key: ");
    scanf("%s", key);

    int msglen = strlen(data);
    int keylen = strlen(key);

    // Append zeroes to data
    strcpy(appendedData, data);
    for (i = 0; i < keylen - 1; i++)
        appendedData[msglen + i] = '0';
    appendedData[msglen + keylen - 1] = '\0';

    // Sender Side CRC
    xor_division(appendedData, key, remainder, quotient);

    printf("\n--- Sender Side ---\n");
    printf("Appended Data       : %s\n", appendedData);
    printf("Quotient            : %s\n", quotient);
    printf("Remainder (CRC bits): %s\n", remainder);
    printf("Final Data to Send  : %s%s\n", data, remainder);

    // Receiver side input
    printf("\nEnter the received data: ");
    scanf("%s", received);

    xor_division(received, key, remainder, quotient);

    printf("\n--- Receiver Side ---\n");
    printf("Received Data       : %s\n", received);
    printf("Quotient            : %s\n", quotient);
    printf("Remainder           : %s\n", remainder);

    // Check for error
    int error = 0;
    for (i = 0; i < keylen - 1; i++) {
        if (remainder[i] != '0') {
            error = 1;
            break;
        }
    }

    if (error)
        printf("Result              : ❌ Error Detected in Received Data.\n");
    else
        printf("Result              : ✅ No Error Detected. Data is Correct.\n");

    return 0;
}
